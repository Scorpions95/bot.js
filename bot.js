// bot.js
require('dotenv').config();
const fs = require('fs');
const {
  Client,
  GatewayIntentBits,
  PermissionsBitField,
  Partials,
  EmbedBuilder,
  PermissionFlagsBits,
} = require('discord.js');

// fetch (Node 18+ –≥–ª–æ–±–∞–ª–µ–Ω; –∏–Ω–∞—á–µ –ø–æ–ª–∑–≤–∞–º–µ node-fetch –¥–∏–Ω–∞–º–∏—á–Ω–æ)
const fetch = global.fetch || ((...args) => import('node-fetch').then(({ default: f }) => f(...args)));

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildVoiceStates
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction, Partials.GuildMember, Partials.User]
});

const PREFIX = '!';
const dataFile = './achievements.json'; // –ø–µ—Ä-–≥–∏–ª–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
const settingsFile = './settings.json';
const gifsFile = './gifs.json';

// ====== STORE (–ø–µ—Ä-–≥–∏–ª–¥) ======
//
// store[guildId] = {
//   users: {
//     [userId]: {
//       messages, mentions, activeDays{}, dailyCounts{}, joinDate,
//       achievements{}, levelCache, lastActiveISO,
//       nightOwlCount, memesCount,
//       reactionsGiven, reactionsReceived,
//       dailyMentions{}, dailyReactionsGiven{},
//       voice: { totalMs, sessionStart, sessionChannelId, inAFKMs, duetStart, lastJoinSize }
//     }
//   }
// }
let store = {};
let settings = {};
let gifs = {};

if (fs.existsSync(dataFile)) {
  try { store = JSON.parse(fs.readFileSync(dataFile, 'utf8')); } catch { store = {}; }
}
if (fs.existsSync(settingsFile)) {
  try { settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8')); } catch { settings = {}; }
}
if (fs.existsSync(gifsFile)) {
  try { gifs = JSON.parse(fs.readFileSync(gifsFile, 'utf8')); } catch { gifs = {}; }
} else {
  gifs = {};
  fs.writeFileSync(gifsFile, JSON.stringify(gifs, null, 2));
}

const save         = () => fs.writeFileSync(dataFile, JSON.stringify(store, null, 2));
const saveSettings = () => fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2));
const saveGifs     = () => fs.writeFileSync(gifsFile, JSON.stringify(gifs, null, 2));

function ensureGuildStore(gid) {
  if (!store[gid]) store[gid] = { users: {} };
  return store[gid];
}
async function ensureUser(guild, userId) {
  const g = ensureGuildStore(guild.id);
  if (!g.users[userId]) {
    const member = await guild.members.fetch(userId).catch(() => null);
    g.users[userId] = {
      messages: 0,
      mentions: 0,
      activeDays: {},
      dailyCounts: {},
      dailyMentions: {},
      dailyReactionsGiven: {},
      joinDate: member?.joinedAt ? member.joinedAt.toISOString() : new Date().toISOString(),
      lastActiveISO: new Date().toISOString(),
      achievements: {},
      levelCache: 0,
      nightOwlCount: 0,
      memesCount: 0,
      reactionsGiven: 0,
      reactionsReceived: 0,
      voice: { totalMs: 0, sessionStart: null, sessionChannelId: null, inAFKMs: 0, duetStart: null, lastJoinSize: 0 }
    };
  } else {
    const u = g.users[userId];
    if (!u.dailyCounts) u.dailyCounts = {};
    if (!u.dailyMentions) u.dailyMentions = {};
    if (!u.dailyReactionsGiven) u.dailyReactionsGiven = {};
    if (!u.voice) u.voice = { totalMs: 0, sessionStart: null, sessionChannelId: null, inAFKMs: 0, duetStart: null, lastJoinSize: 0 };
    if (!u.lastActiveISO) u.lastActiveISO = new Date().toISOString();
    if (typeof u.levelCache !== 'number') u.levelCache = 0;
    if (typeof u.nightOwlCount !== 'number') u.nightOwlCount = 0;
    if (typeof u.memesCount !== 'number') u.memesCount = 0;
    if (typeof u.reactionsGiven !== 'number') u.reactionsGiven = 0;
    if (typeof u.reactionsReceived !== 'number') u.reactionsReceived = 0;
  }
  return g.users[userId];
}

function ensureGuildSettings(gid) {
  if (!settings[gid]) settings[gid] = {};
  if (!settings[gid].achRoles) settings[gid].achRoles = {};
  if (!settings[gid].socialLinks) settings[gid].socialLinks = []; // –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ —Å–æ—Ü–∏–∞–ª–∫–∏ –∑–∞ !rijkuuu
  return settings[gid];
}
function saveGuildSettings(gid, gset) {
  settings[gid] = gset;
  try {
    fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2));
  } catch (err) {
    console.error("Error saving settings:", err);
  }
}
function setGuildChannel(gid, key, channelId) { ensureGuildSettings(gid)[key] = channelId; saveSettings(); }
function getGuildChannel(guild, key, envFallbackKey) {
  const gid = guild.id;
  const id = (settings[gid] && settings[gid][key]) || process.env[envFallbackKey];
  return id ? guild.channels.cache.get(id) || null : null;
}

// ====== UTIL ======
const daysBetween = (iso) => Math.floor((new Date() - new Date(iso)) / (1000*60*60*24));
function botCan(channel, perm) {
  const me = channel.guild?.members.me;
  if (!me) return true;
  const perms = channel.permissionsFor(me);
  if (!perms) return true;
  return perms.has(perm);
}
async function sendEmbedOrText(channel, embed, plainText) {
  try {
    if (!botCan(channel, PermissionsBitField.Flags.SendMessages)) throw new Error('NO_SEND_PERMISSION');
    if (!botCan(channel, PermissionsBitField.Flags.EmbedLinks)) return await channel.send(plainText);
    return await channel.send({ embeds: [embed] });
  } catch (err) {
    try { return await channel.send(plainText); }
    catch (e2) {
      try {
        const owner = await channel.guild.fetchOwner();
        await owner.send(`‚ùó –ù–µ –º–æ–≥–∞ –¥–∞ –ø–∏—à–∞ –≤ <#${channel.id}>: ${e2.message}`).catch(() => {});
      } catch {}
      return null;
    }
  }
}
async function safeSend(channel, payload) {
  try {
    if (!botCan(channel, PermissionsBitField.Flags.SendMessages)) throw new Error('NO_SEND_PERMISSION');
    return await channel.send(payload);
  } catch (err) {
    try {
      const owner = await channel.guild.fetchOwner().catch(() => null);
      owner && await owner.send(`‚ùó –ù–µ –º–æ–≥–∞ –¥–∞ –ø–∏—à–∞ –≤ <#${channel.id}>: ${err.message}`).catch(() => {});
    } catch {}
    return null;
  }
}

// ====== ACH LABELS ======
const ACH = {
  messages10: 'üó®Ô∏è –ë—ä–±—Ä–∏–≤–µ—Ü I (10+ —Å—ä–æ–±—â.)',
  veteran30d: '‚åõ –°—Ç–∞—Ä–æ –∫—É—á–µ (30+ –¥–Ω–∏)',
  lvl1: 'üéØ –ü—ä—Ä–≤–∏ —Å—Ç—ä–ø–∫–∏ (–ù–∏–≤–æ 1)',
  lvl5: 'üÜô –ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü (–ù–∏–≤–æ 5)',
  lvl10: 'üèÖ –û–ø–∏—Ç–µ–Ω (–ù–∏–≤–æ 10)',
  lvl25: 'ü•á –ì—É—Ä—É (–ù–∏–≤–æ 25)',
  lvl50: 'üèÜ –õ–µ–≥–µ–Ω–¥–∞ (–ù–∏–≤–æ 50)',
  lvl100: 'üëë –õ–µ–≥–µ–Ω–¥–∞+ (–ù–∏–≤–æ 100)',
  nightOwl: 'ü¶â –ù–æ—â–Ω–∞ –ø—Ç–∏—Ü–∞ (100 —Å—ä–æ–±—â. 00‚Äì06—á)',
  marathon: 'üèÉ –ú–∞—Ä–∞—Ç–æ–Ω–µ—Ü (1000/7 –¥–Ω–∏)',
  philosopher: 'ü§î –§–∏–ª–æ—Å–æ—Ñ (50 —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç–≤–æ–∏ —Å—ä–æ–±—â.)',
  memelord: 'üòÇ –ú–µ–º–µ –ª–æ—Ä–¥ (100 –∫–∞—Ä—Ç–∏–Ω–∫–∏)',
  v_first: 'üéôÔ∏è –ü—ä—Ä–≤–∞ –¥—É–º–∞ (10 –º–∏–Ω. –≥–ª–∞—Å)',
  v_talker: 'üó£Ô∏è –°—ä–±–µ—Å–µ–¥–Ω–∏–∫ (5 —á. –≥–ª–∞—Å)',
  v_long: '‚è±Ô∏è –î—ä–ª—ä–≥ —Ä–∞–∑–≥–æ–≤–æ—Ä (3+ —á. —Å–µ—Å–∏—è)',
  v_party: 'üéâ –ü–∞—Ä—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ (10+ –≤ –∫–∞–Ω–∞–ª–∞)',
  v_duet: 'üé§ –î—É–µ—Ç (30 –º–∏–Ω. 1-–Ω–∞-1)',
  v_afk: 'üò¥ –ö–∞–ø–∏—Ç–∞–Ω AFK (1 —á. –≤ AFK)',
  reactor500: '‚ö° –†–µ–∞–∫—Ç–æ—Ä (500 —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–µ–Ω–∏)',
  firstMsg: 'üëã –•–µ–π, –∏–º–∞ –ª–∏ –Ω—è–∫–æ–π? (1-–≤–æ —Å—ä–æ–±—â.)',
  firstReact: '‚úÖ –†–µ–∞–∫—Ç–æ—Ä (1-–≤–∞ —Ä–µ–∞–∫—Ü–∏—è)',
  firstVoice: 'üéß –°–ª—É—à–∞—Ç–µ–ª (–≤–ª–µ–∑ –≤ –≥–ª–∞—Å–æ–≤ –∫–∞–Ω–∞–ª –≤–µ–¥–Ω—ä–∂)',
  social10: 'üßë‚Äçü§ù‚Äçüßë –°–æ—Ü–∏–∞–ª–µ–Ω (—Å–ø–æ–º–µ–Ω–∞—Ç –æ—Ç 10 —Ä–∞–∑–ª–∏—á–Ω–∏)',
  veteran1y: 'üéñÔ∏è –í–µ—Ç–µ—Ä–∞–Ω (1 –≥–æ–¥–∏–Ω–∞ –≤ —Å—ä—Ä–≤—ä—Ä–∞)'
};

// ====== LEVELING ======
function computeLevel(u) { // –ø—Ä–æ—Å—Ç–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ: 1 –ª–≤ / 20 —Å—ä–æ–±—â–µ–Ω–∏—è
  const lvl = Math.floor((u.messages || 0) / 20);
  return lvl;
}

// ====== ACH CHECK & ROLES ======
async function maybeAssignAchievementRoles(guild, userId, unlockedKeys) {
  const gset = ensureGuildSettings(guild.id);
  const achRoles = gset.achRoles || {};
  if (!unlockedKeys?.length) return;

  const me = guild.members.me;
  if (!me?.permissions.has(PermissionsBitField.Flags.ManageRoles)) return;

  const member = await guild.members.fetch(userId).catch(() => null);
  if (!member) return;

  for (const key of unlockedKeys) {
    const roleId = achRoles[key];
    if (!roleId) continue;
    const role = guild.roles.cache.get(roleId);
    if (!role) continue;
    if (me.roles.highest.position <= role.position) continue;
    if (!member.roles.cache.has(role.id)) {
      await member.roles.add(role).catch(() => {});
    }
  }
}

async function announceAchievements(channel, userId, keys) {
  if (!keys.length) return;
  const names = keys.map(k => ACH[k] || k);
  const achCh = getGuildChannel(channel.guild, 'achievements', 'ACHIEVEMENT_CHANNEL_ID') || channel;
  await safeSend(achCh, `üéâ <@${userId}> –æ—Ç–∫–ª—é—á–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: **${names.join('**, **')}**!`);
}

async function checkAchievements(guild, userId, channel) {
  const u = store[guild.id]?.users?.[userId];
  if (!u) return [];
  const newly = [];

  // –±–∞–∑–æ–≤–∏
  if (u.messages >= 10 && !u.achievements.messages10) { u.achievements.messages10 = true; newly.push('messages10'); }
  if (daysBetween(u.joinDate) >= 30 && !u.achievements.veteran30d) { u.achievements.veteran30d = true; newly.push('veteran30d'); }
  if (daysBetween(u.joinDate) >= 365 && !u.achievements.veteran1y) { u.achievements.veteran1y = true; newly.push('veteran1y'); }

  // –ø—ä—Ä–≤–æ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
  if (u.messages >= 1 && !u.achievements.firstMsg) { u.achievements.firstMsg = true; newly.push('firstMsg'); }

  // –Ω–∏–≤–∞
  u.levelCache = computeLevel(u);
  const lvl = u.levelCache;
  const lvlKeys = [
    [1,'lvl1'], [5,'lvl5'], [10,'lvl10'], [25,'lvl25'], [50,'lvl50'], [100,'lvl100']
  ];
  for (const [th, key] of lvlKeys) if (lvl >= th && !u.achievements[key]) { u.achievements[key] = true; newly.push(key); }

  // –Ω–æ—â–Ω–∞ –ø—Ç–∏—Ü–∞
  if (u.nightOwlCount >= 100 && !u.achievements.nightOwl) { u.achievements.nightOwl = true; newly.push('nightOwl'); }

  // –º–∞—Ä–∞—Ç–æ–Ω–µ—Ü (—Å—É–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 7 –¥–Ω–∏)
  const today = new Date();
  let last7 = 0;
  for (let i=0;i<7;i++) {
    const d = new Date(today); d.setDate(today.getDate()-i);
    const key = d.toISOString().split('T')[0];
    last7 += u.dailyCounts[key] || 0;
  }
  if (last7 >= 1000 && !u.achievements.marathon) { u.achievements.marathon = true; newly.push('marathon'); }

  // —Ñ–∏–ª–æ—Å–æ—Ñ (50 –ø–æ–ª—É—á–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏)
  if (u.reactionsReceived >= 50 && !u.achievements.philosopher) { u.achievements.philosopher = true; newly.push('philosopher'); }

  // –º–µ–º–µ –ª–æ—Ä–¥ (100 –∫–∞—Ä—Ç–∏–Ω–∫–∏)
  if (u.memesCount >= 100 && !u.achievements.memelord) { u.achievements.memelord = true; newly.push('memelord'); }

  // —Ä–µ–∞–∫—Ç–æ—Ä 1-–≤–∞ –∏ 500
  if (u.reactionsGiven >= 1 && !u.achievements.firstReact) { u.achievements.firstReact = true; newly.push('firstReact'); }
  if (u.reactionsGiven >= 500 && !u.achievements.reactor500) { u.achievements.reactor500 = true; newly.push('reactor500'); }

  // —Å–æ—Ü–∏–∞–ª–µ–Ω ‚Äì —Å–ø–æ–º–µ–Ω–∞—Ç –æ—Ç 10 —Ä–∞–∑–ª–∏—á–Ω–∏ —á–æ–≤–µ–∫–∞ (—â–µ –ø–æ–¥–¥—ä—Ä–∂–∞–º–µ set)
  if (!u.mentionedBy) u.mentionedBy = {}; // { otherUserId: true }
  if (Object.keys(u.mentionedBy).length >= 10 && !u.achievements.social10) { u.achievements.social10 = true; newly.push('social10'); }

  // –≥–ª–∞—Å–æ–≤–∏
  const v = u.voice || {};
  const minutes = Math.floor((v.totalMs || 0)/60000);
  if (minutes >= 10 && !u.achievements.v_first) { u.achievements.v_first = true; newly.push('v_first'); }
  if (minutes >= 300 && !u.achievements.v_talker) { u.achievements.v_talker = true; newly.push('v_talker'); }
  if (v.hadLongSession && !u.achievements.v_long) { u.achievements.v_long = true; newly.push('v_long'); }
  if (v.hadParty && !u.achievements.v_party) { u.achievements.v_party = true; newly.push('v_party'); }
  if (v.hadDuet && !u.achievements.v_duet) { u.achievements.v_duet = true; newly.push('v_duet'); }
  if ((v.inAFKMs || 0) >= 60*60000 && !u.achievements.v_afk) { u.achievements.v_afk = true; newly.push('v_afk'); }

  if (newly.length) {
    await announceAchievements(channel, userId, newly);
    await maybeAssignAchievementRoles(guild, userId, newly);
  }
  return newly;
}

// ====== GIF-–∏ (—Å–∫—ä—Å–µ–Ω –±–ª–æ–∫ ‚Äì –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∞–∑–µ–Ω–∞) ======
const GIPHY_KEY = process.env.GIPHY_API_KEY || null;
const GIF_QUERIES = {
  kill:['anime dramatic kill','fatality'],
  pat:['anime headpat','pat on head'],
  slap:['anime slap','slap meme'],
  hug:['anime hug','wholesome hug'],
  kiss:['anime kiss','kiss gif'],
  shakehands:['handshake','agreement handshake'],
  wave:['anime wave','wave hi'],
  yay:['celebration yay'],
  run:['anime running'],
  lay:['lying down tired'],
  attack:['sword attack anime'],
  deffense:['block shield'],
  cry:['anime crying'],
  sad:['sad anime'],
  happy:['happy anime'],
  angry:['angry anime'],
  poke:['poke someone'],
  drink:['cheers drink'],
  hungry:['hungry anime'],
  marry:['wedding kiss'],
  divorce:['break up sad'],
  cheers:['cheers toast'],
  eat:['anime eating'],
  stare:['intense stare'],
  cringe:['cringe reaction'],
  give:['give gift'],
  highfive:['high five'],
  laugh:['anime laugh'],
  fight:['anime fight'],
  money:['make it rain money'],
  fly:['flying anime'],
  jump:['anime jump'],
  sell:['auction sold'],
  buy:['buy purchase'],
  sell1:['sell item']
};
const RP_GIFS_FALLBACK = {
  hug:['https://media.giphy.com/media/od5H3PmEG5EVq/giphy.gif']
};
const pick = arr => arr[Math.floor(Math.random()*arr.length)];
async function fetchGifFromGiphy(q){
  if (!GIPHY_KEY) return null;
  const url=`https://api.giphy.com/v1/gifs/search?api_key=${encodeURIComponent(GIPHY_KEY)}&q=${encodeURIComponent(q)}&limit=25&rating=pg-13&lang=en&bundle=messaging_non_clips`;
  try{const r=await fetch(url); if(!r.ok)return null; const d=await r.json(); const res=d?.data||[]; if(!res.length)return null; const img=pick(res).images||{}; return img.original?.url||img.downsized_medium?.url||img.downsized?.url||null;}catch{return null;}
}
function getCustomGif(type){ return gifs[type]?.length ? pick(gifs[type]) : null; }
async function getGifUrlFor(type){
  const cur=getCustomGif(type); if (cur) return cur;
  for (const q of (GIF_QUERIES[type]||[])){ const u=await fetchGifFromGiphy(q); if(u) return u; }
  const fb=RP_GIFS_FALLBACK[type]; return fb?pick(fb):null;
}
async function sendRPDynamic(channel, description, type) {
  const url = await getGifUrlFor(type);
  const embed = new EmbedBuilder().setDescription(description).setColor(0xEB459E);
  if (url) embed.setImage(url);
  const plain = url ? `${description}\n${url}` : description;
  return sendEmbedOrText(channel, embed, plain);
}
// –Ω—è–∫—ä–¥–µ –≥–æ—Ä–µ –≤ bot.js (–Ω–∞–¥ handler-–∞ –∑–∞ guildMemberUpdate)
const nickCache = new Map(); // key: `${guildId}:${userId}` -> lastNickname

// ====== READY ======
client.once('ready', async () => {
  console.log(`ü§ò –ë–æ—Ç—ä—Ç ${client.user.tag} –µ –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –¥–∞ —Ç—Ä–æ—à–∏!`);
  // —Å–ª–µ–¥ ready –±–ª–æ–∫–∞, –Ω–æ –Ω–µ –≤—ä—Ç—Ä–µ –≤ –Ω–µ–≥–æ
client.on('guildMemberUpdate', onNickChange);
// –õ–æ–≥–≤–∞–Ω–µ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –≥–ª–æ–±–∞–ª–Ω–æ –∏–º–µ/–¥–∏—Å–ø–ª–µ–π –∏–º–µ
client.on('userUpdate', async (oldUser, newUser) => {
  const usernameChanged   = oldUser.username    !== newUser.username;
  const displayChanged    = (oldUser.globalName ?? null) !== (newUser.globalName ?? null);
  if (!usernameChanged && !displayChanged) return;

  // –º–∏–Ω–∏ –ø—Ä–µ–∑ –≤—Å–∏—á–∫–∏ —Å—ä—Ä–≤—ä—Ä–∏, –∫—ä–¥–µ—Ç–æ –±–æ—Ç—ä—Ç –µ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —á–ª–µ–Ω
  for (const guild of client.guilds.cache.values()) {
    const member = guild.members.cache.get(newUser.id);
    if (!member) continue;

    const chId = getGuildChannel(guild.id, 'nicklogs');
    const logChannel = chId && guild.channels.cache.get(chId);
    if (!logChannel) continue;

    const emb = new EmbedBuilder()
      .setTitle('‚úèÔ∏è –°–º—è–Ω–∞ –Ω–∞ –≥–ª–æ–±–∞–ª–Ω–æ –∏–º–µ')
      .setDescription(`${member} –ø—Ä–æ–º–µ–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ—Ç–æ —Å–∏ –∏–º–µ`)
      .addFields(
        ...(usernameChanged ? [
          { name: '–°—Ç–∞—Ä username', value: oldUser.username || '‚Äî', inline: true },
          { name: '–ù–æ–≤ username',  value: newUser.username || '‚Äî', inline: true },
        ] : []),
        ...(displayChanged ? [
          { name: '–°—Ç–∞—Ä display name', value: oldUser.globalName || '‚Äî', inline: true },
          { name: '–ù–æ–≤ display name',  value: newUser.globalName || '‚Äî', inline: true },
        ] : []),
        { name: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', value: `${newUser.tag} \`${newUser.id}\`` }
      )
      .setThumbnail(newUser.displayAvatarURL({ size: 128 }))
      .setColor(0xFEE75C)
      .setTimestamp();

    await logChannel.send({ embeds: [emb] });
  }
});
function onNickChange(oldMember, newMember) {
   // (–ø–æ –∂–µ–ª–∞–Ω–∏–µ ‚Äì –∑–∞ –ø–æ-—Ç–æ—á–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–¥–Ω–∞–≥–∞ —Å–ª–µ–¥ —Å—Ç–∞—Ä—Ç–∞; —Ç–µ–∂–∫–æ –∑–∞ –≥–æ–ª–µ–º–∏ —Å—ä—Ä–≤—ä—Ä–∏)
  // for (const g of client.guilds.cache.values()) {
  //   try { await g.members.fetch(); } catch (_) {}
  // }

  // –ù–∞–ø—ä–ª–Ω–∏ –ª–æ–∫–∞–ª–Ω–∏—è –∫–µ—à —Å –≤–µ—á–µ –∫–µ—à–∏—Ä–∞–Ω–∏—Ç–µ —á–ª–µ–Ω–æ–≤–µ
  client.guilds.cache.forEach(g => {
    g.members.cache.forEach(m => {
      nickCache.set(`${g.id}:${m.id}`, m.nickname || m.user.username);
    });
  });

  console.log(`[nicklog] cached ${nickCache.size} members across ${client.guilds.cache.size} guilds.`);
});

client.on('error', e => console.warn('Client error:', e?.message));
process.on('unhandledRejection', r => console.warn('Unhandled rejection:', r));
// –õ–æ–≥–∏–∫–∞ –∑–∞ –ª–æ–≥–≤–∞–Ω–µ –Ω–∞ —Å–º—è–Ω–∞ –Ω–∞ –Ω–∏–∫
async function onNickChange(oldMember, newMember) {
  try {
    if (oldMember.partial) oldMember = await oldMember.fetch().catch(() => null);
    if (newMember.partial) newMember = await newMember.fetch().catch(() => null);
    if (!oldMember || !newMember) return;

    const oldNick = oldMember.nickname ?? oldMember.user.username;
    const newNick = newMember.nickname ?? newMember.user.username;
    if (oldNick === newNick) return;

    const chId = getGuildChannel(newMember.guild.id, 'nicklogs');
    const logChannel = chId && newMember.guild.channels.cache.get(chId);
    if (!logChannel) return;

    const emb = new EmbedBuilder()
      .setTitle('‚úèÔ∏è –°–º—è–Ω–∞ –Ω–∞ –Ω–∏–∫–Ω–µ–π–º')
      .setDescription(`${newMember} —Å–º–µ–Ω–∏ –Ω–∏–∫–Ω–µ–π–º–∞ —Å–∏`)
      .addFields(
        { name: '–°—Ç–∞—Ä', value: String(oldNick).slice(0, 256), inline: true },
        { name: '–ù–æ–≤',  value: String(newNick).slice(0, 256), inline: true },
        { name: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', value: `${newMember.user.tag} \`${newMember.id}\`` }
      )
      .setThumbnail(newMember.user.displayAvatarURL({ size: 128 }))
      .setColor(0xFEE75C)
      .setTimestamp();

    await logChannel.send({ embeds: [emb] });

    if (typeof nickCache?.set === 'function') {
      nickCache.set(`${newMember.guild.id}:${newMember.id}`, newNick);
    }
  } catch (err) {
    console.error('[nicklog] error:', err);
  }
}

// === LOG NICKNAME CHANGES ===
client.on('guildMemberUpdate', async (oldMember, newMember) => {
  try {
    if (oldMember.partial) oldMember = await oldMember.fetch();
    if (newMember.partial) newMember = await newMember.fetch();

    const curr = newMember.nickname || newMember.user.username;
    const key  = `${newMember.guild.id}:${newMember.id}`;
    const prev = nickCache.get(key) ?? (oldMember.nickname || oldMember.user.username);

    if (prev !== curr) {
      const chId = getGuildChannel(newMember.guild.id, 'nicklogs');
      if (chId) {
        const logChannel = newMember.guild.channels.cache.get(chId);
        if (logChannel) {
          const emb = new EmbedBuilder()
            .setTitle('‚úèÔ∏è –°–º—è–Ω–∞ –Ω–∞ –Ω–∏–∫–Ω–µ–π–º')
            .setDescription(`${newMember} —Å–º–µ–Ω–∏ –Ω–∏–∫–Ω–µ–π–º–∞ —Å–∏`)
            .addFields(
              { name: '–°—Ç–∞—Ä –Ω–∏–∫–Ω–µ–π–º', value: String(prev), inline: true },
              { name: '–ù–æ–≤ –Ω–∏–∫–Ω–µ–π–º', value: String(curr), inline: true }
            )
            .setColor(0xFEE75C)
            .setTimestamp();
          await logChannel.send({ embeds: [emb] });
        }
      }
    }

    // –≤–∏–Ω–∞–≥–∏ –æ–±–Ω–æ–≤—è–≤–∞–π –∫–µ—à–∞ –Ω–∞–∫—Ä–∞—è
    nickCache.set(key, curr);

  } catch (err) {
    console.error('‚ùå Nickname log error:', err);
  }
});


// ====== MESSAGE EVENTS ======
client.on('messageCreate', async (message) => {
  if (!message.guild || message.author.bot) return;

  const guildId = message.guild.id;
  const userId = message.author.id;
  const isCommand = message.content.startsWith(PREFIX);
  const userData = await ensureUser(message.guild, userId);
  const today = new Date().toISOString().split('T')[0];

  // –ª–æ–≥ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞
  try {
    const server = message.guild?.name || 'DM';
    const channelName = message.channel?.name || message.channel?.id || 'unknown';
    let line = `[${server} #${channelName}] ${message.author.tag}: ${message.content || ''}`.trim();
    if (message.attachments?.size) {
      const urls = [...message.attachments.values()].map(a => a.url).join(', ');
      line += ` | attachments: ${urls}`;
    }
    console.log(line);
  } catch {}

  // –±—Ä–æ–∏–º —Å–∞–º–æ –ù–ï-–∫–æ–º–∞–Ω–¥–Ω–∏
  if (!isCommand) {
    userData.messages += 1;
    userData.activeDays[today] = true;

    // –¥–Ω–µ–≤–Ω–∏ –±—Ä–æ—è—á–∏
    userData.dailyCounts[today] = (userData.dailyCounts[today] || 0) + 1;
    const mentionCount = message.mentions.users.size || 0;
    if (mentionCount) {
      userData.mentions += mentionCount;
      userData.dailyMentions[today] = (userData.dailyMentions[today] || 0) + mentionCount;
    }

    // –Ω–æ—â–Ω–∞ –ø—Ç–∏—Ü–∞ (0-5 —á–∞—Å–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ)
    const h = message.createdAt.getHours();
    if (h >= 0 && h <= 5) userData.nightOwlCount = (userData.nightOwlCount || 0) + 1;

    // –º–µ–º–µ—Ç–∞ / –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const hasImageAttach = [...message.attachments.values()].some(a => (a.contentType||'').startsWith('image/'));
    const hasImageEmbed = (message.embeds||[]).some(e => e?.image?.url);
    if (hasImageAttach || hasImageEmbed) userData.memesCount += 1;

    userData.lastActiveISO = new Date().toISOString();
    save();
    await checkAchievements(message.guild, userId, message.channel);
  }

  if (!isCommand) return;

  // –∫–æ–º–∞–Ω–¥–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
  const args = message.content.slice(PREFIX.length).trim().split(/\s+/);
  const cmd = (args.shift() || '').toLowerCase();

  // ===== –ü—É–±–ª–∏—á–Ω–∏ =====
  if (cmd === 'help') {
    const help = new EmbedBuilder()
      .setTitle('üìú –ö–æ–º–∞–Ω–¥–∏ –Ω–∞ –±–æ—Ç–∞')
      .addFields(
        {
          name: 'üë• –ü—É–±–ª–∏—á–Ω–∏',
          value: [
            '`!help` ‚Äì —Å–ø–∏—Å—ä–∫ —Å –∫–æ–º–∞–Ω–¥–∏',
            '`!invite` ‚Äì –ª–∏–Ω–∫–æ–≤–µ –∑–∞ –ø–æ–∫–∞–Ω–∞',
            '`!achievements` ‚Äì —Ç–≤–æ–∏—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            '`!top` ‚Äì —Ç–æ–ø –ø–æ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä)',
            '`!bgrock` ‚Äì –ª–∏–Ω–∫ –∫—ä–º bgrock.eu',
            '`!ping` ‚Äì –∂–∏–≤ –ª–∏ —Å—ä–º',
            '`!stats` ‚Äì —Ç–≤–æ—è—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–∫–ª. –¥–Ω–µ—Å, —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä)',
            '`!today` ‚Äì –∫–æ–π –∫–æ–ª–∫–æ –µ –ø–∏—Å–∞–ª –¥–Ω–µ—Å (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä)',
            '`!messages [@user]` ‚Äì —Å—ä–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä)',
            '`!report @user –ø—Ä–∏—á–∏–Ω–∞ | –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞` ‚Äì –¥–æ–∫–ª–∞–¥ –∫—ä–º –∞–¥–º–∏–Ω–∏—Ç–µ',
            '`!suggest <—Ç–µ–∫—Å—Ç>` ‚Äì –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            '`!feedback <—Ç–µ–∫—Å—Ç>` ‚Äì –æ–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞',
            '`!rijkuuu` ‚Äì —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏ –Ω–∞ Rijkuuu',
			'`!socials` ‚Äì –ü–æ–∫–∞–∑–≤–∞ —Å–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏',
			'`!dice` ‚Äì –•–≤—ä—Ä–ª—è –∑–∞—Ä',
			'`!rps` ‚Äì –ò–≥—Ä–∞–µ—à –∫–∞–º—ä–∫, –Ω–æ–∂–∏—Ü–∞ –∏ —Ö–∞—Ä—Ç–∏—è',
			'`!team` ‚Äì –ü–æ–∫–∞–∑–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ –≤—Ä—ä–∑–∫–∞ —Å –µ–∫–∏–ø–∞',
			
          ].join('\n')
        },
        {
          name: 'üé≠ Roleplay',
          value: [
            '`!kill @user`, `!pat @user`, `!slap @user`, `!hug @user`, `!kiss @user`, `!shakehands @user`, `!wave @user`, `!poke @user`',
            '`!yay`, `!run`, `!lay`, `!attack`, `!defense`, `!cry`, `!sad`, `!happy`, `!angry`',
            '`!drink`, `!hungry`, `!cheers`, `!eat`, `!marry @user`, `!divorce @user`',
            '`!stare`, `!cringe`, `!highfive @user`, `!give –ø—Ä–µ–¥–º–µ—Ç @user`',
            '`!laugh`, `!fight @user`, `!money`, `!fly`, `!jump`, `!sell @user`, `!buy [–ø—Ä–µ–¥–º–µ—Ç]`, `!sell1 <–ø—Ä–µ–¥–º–µ—Ç> @user`',
			`!kick`, `!tickle`, `!punch`
          ].join('\n')
        },
        {
          name: 'üõ† –ê–¥–º–∏–Ω',
          value: [
            '`!del <1-100> [@user]`',
            '`!resetachievements`',
            '`!resetmessages [@user|all]` | `!resetdays [@user|all]` | `!resetmentions [@user|all]` | `!resetall [@user|all]`',
            '`!addmessages @user <–±—Ä–æ–π>` / `!rmessages @user <–±—Ä–æ–π>` | `!topres`',
            '`!achsetup (set|clear|list)`',
            '`!addgif <—Ç–∏–ø> <url>` / `!delgif <—Ç–∏–ø> <‚Ññ>` / `!listgifs <—Ç–∏–ø>` | `!testgifs`',
            '`!setchannel <—Ç–∏–ø> #–∫–∞–Ω–∞–ª` | `!showchannels`',
            '`!pin <ID|–ª–∏–Ω–∫>` / `!unpin <ID|–ª–∏–Ω–∫>`',
            '`!check bots|users|stats @user`',
            '`!addsocial <url>`',
            '`!monthly` ‚Äì –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 –¥–Ω–∏',
            '`!active @user` ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç',
			'!removesocial <url> - –ü—Ä–µ–º–∞—Ö–≤–∞ —Å–æ—Ü–∏–∞–ª–µ–Ω –ª–∏–Ω–∫',
			'!addteam - –¥–æ–±–∞–≤—è –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ –≤—Ä—ä–∑–∫–∞ —Å –µ–∫–∏–ø–∞',
			'!removeteam - –ø—Ä–µ–º–∞—Ö–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ –≤—Ä—ä–∑–∫–∞ —Å –µ–∫–∏–ø–∞',
			
          ].join('\n')
        }
      )
      .setColor(0x5865F2);
    return sendEmbedOrText(message.channel, help, 'üìú –í–∏–∂ —Å–ø–∏—Å—ä–∫–∞ —Å –∫–æ–º–∞–Ω–¥–∏ –≤ embed-–∞.');
  }

  if (cmd === 'invite') {
    const links = getInviteLinks();
    if (!links) return message.reply('‚ö†Ô∏è –û–ø–∏—Ç–∞–π —Å–ª–µ–¥ —Å–µ–∫—É–Ω–¥–∏.');
    const emb = new EmbedBuilder()
      .setTitle('üîó –ü–æ–∫–∞–Ω–∏ –±–æ—Ç–∞')
      .addFields(
        { name: 'üõ°Ô∏è Admin –ø—Ä–∞–≤–∞', value: `[–î–æ–±–∞–≤–∏](<${links.adminInvite}>)`, inline: false },
        { name: '‚úÖ –ú–∏–Ω–∏–º–∞–ª–Ω–∏ –ø—Ä–∞–≤–∞', value: `[–î–æ–±–∞–≤–∏](<${links.minimalInvite}>) (permissions=${links.minimal})`, inline: false }
      )
      .setColor(0x57F287);
    return sendEmbedOrText(message.channel, emb, `üîó Admin: ${links.adminInvite}\nMinimal: ${links.minimalInvite}`);
  }

  if (cmd === 'ping') return message.reply('üèì –ü–æ–Ω–≥!');
  if (cmd === 'bgrock') return message.channel.send('üé∏ https://bgrock.eu/');

  if (cmd === 'rijkuuu') {
  const gset = ensureGuildSettings(message.guild.id);

  const desc =
    '–°–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏ –Ω–∞ Rijkuuu –º–æ–∂–µ –¥–∞ –Ω–∞–º–µ—Ä–∏—Ç–µ —Ç—É–∫\n\n' +
    'Twitch - https://www.twitch.tv/rijkuuu\n\n' +
    'Instagram - https://www.instagram.com/rijkuuu._.art\n\n' +
    'TikTok - https://www.tiktok.com/@rijkuuu.gaming\n\n' +
    'Main profile - https://www.instagram.com/_theangelofdarkness';

  const emb = new EmbedBuilder()
    .setTitle('üåê –°–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏ –Ω–∞ Rijkuuu')
    .setDescription(desc)
    .setColor(0xFEE75C);

  return sendEmbedOrText(message.channel, emb, desc);
}

  if (cmd === 'achievements') {
    const keys = Object.keys(userData.achievements).filter(k => userData.achievements[k]);
    if (!keys.length) return message.reply('‚ùå –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –æ—Ç–∫–ª—é—á–µ–Ω–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è.');
    const list = keys.map(k => ACH[k] || k).join('\n');
    return message.reply(`üèÜ –¢–≤–æ–∏—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n${list}`);
  }
  // üé≤ –•–≤—ä—Ä–ª—è–Ω–µ –Ω–∞ –∑–∞—Ä (1‚Äì6)
if (cmd === 'dice') {
  const result = Math.floor(Math.random() * 6) + 1; // —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
  return message.reply(`üé≤ –•–≤—ä—Ä–ª–∏—Ö –∑–∞—Ä–∞ –∏ —Å–µ –ø–∞–¥–Ω–∞: **${result}**`);
}
// ‚úäü§ö‚úåÔ∏è –ö–∞–º—ä–∫ ‚Äì –•–∞—Ä—Ç–∏—è ‚Äì –ù–æ–∂–∏—Ü–∞
if (cmd === 'rps') {
  // –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Ö–æ–¥–∞ (–ø—Ä–∏–µ–º–∞ BG/EN –∏ –µ–º–æ–¥–∂–∏—Ç–∞)
  const raw = (args[0] || '').toLowerCase();
  const map = {
    '–∫–∞–º—ä–∫': 'rock', 'kamen': 'rock', 'rock': 'rock', '‚úä': 'rock',
    '—Ö–∞—Ä—Ç–∏—è': 'paper', 'hartia': 'paper', 'paper': 'paper', '‚úã': 'paper',
    '–Ω–æ–∂–∏—Ü–∞': 'scissors', '–Ω–æ–∂–∏—Ü–∏': 'scissors', 'nojica': 'scissors', 'scissors': 'scissors', '‚úå': 'scissors', '‚úåÔ∏è': 'scissors'
  };
  const user = map[raw];

  if (!user) {
    return message.reply('‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π: `!rps <–∫–∞–º—ä–∫|—Ö–∞—Ä—Ç–∏—è|–Ω–æ–∂–∏—Ü–∞>` (–ø—Ä–∏–µ–º–∞—Ç —Å–µ –∏ ‚úä ‚úã ‚úåÔ∏è / rock|paper|scissors)');
  }

  const choices = ['rock', 'paper', 'scissors'];
  const bot = choices[Math.floor(Math.random() * choices.length)];
  const pretty = { rock: '–∫–∞–º—ä–∫', paper: '—Ö–∞—Ä—Ç–∏—è', scissors: '–Ω–æ–∂–∏—Ü–∞' };

  let result;
  if (user === bot) {
    result = 'ü§ù –†–∞–≤–µ–Ω—Å—Ç–≤–æ!';
  } else if (
    (user === 'rock' && bot === 'scissors') ||
    (user === 'scissors' && bot === 'paper') ||
    (user === 'paper' && bot === 'rock')
  ) {
    result = 'üéâ –¢–∏ –ø–æ–±–µ–¥–∏!';
  } else {
    result = 'üòÖ –ê–∑ –ø–æ–±–µ–¥–∏—Ö!';
  }

  const emb = new EmbedBuilder()
    .setTitle('‚úäü§ö‚úåÔ∏è –ö–∞–º—ä–∫ ‚Äì –•–∞—Ä—Ç–∏—è ‚Äì –ù–æ–∂–∏—Ü–∞')
    .setDescription(`–¢–∏: **${pretty[user]}**\n–ê–∑: **${pretty[bot]}**\n\n${result}`)
    .setColor(0x5865F2);

  // –∞–∫–æ –∏–º–∞—à –ø–æ–º–æ—â–Ω–∏–∫–∞ sendEmbedOrText ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞–π –Ω–µ–≥–æ; –∏–Ω–∞—á–µ –∏–∑–ø—Ä–∞—Ç–∏ embed-–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ
  return (typeof sendEmbedOrText === 'function')
    ? sendEmbedOrText(message.channel, emb, `–¢–∏: ${pretty[user]}\n–ê–∑: ${pretty[bot]}\n${result}`)
    : message.channel.send({ embeds: [emb] });
}


  // ===== –°–û–¶–ò–ê–õ–ù–ò –ú–†–ï–ñ–ò =====
if (cmd === 'socials') {
  console.log('[cmd] socials');
  const gset = ensureGuildSettings(message.guild.id);
  gset.customSocials = gset.customSocials || [];

  if (gset.customSocials.length === 0) {
    return message.reply("‚ÑπÔ∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —Å–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏. –ò–∑–ø–æ–ª–∑–≤–∞–π `!addsocial <–ª–∏–Ω–∫>` –∑–∞ –¥–∞ –¥–æ–±–∞–≤–∏—à.");
  }
  const desc = gset.customSocials.map((u, i) => `${i + 1}. ${u}`).join('\n');
  const emb = new EmbedBuilder()
    .setTitle('üåê –°–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞')
    .setDescription(desc)
    .setColor(0x57F287);

  return sendEmbedOrText(message.channel, emb, desc);
}
if (cmd === 'addsocial') {
  if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
    return message.reply("‚ö†Ô∏è –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –¥–æ–±–∞–≤—è—Ç —Å–æ—Ü–∏–∞–ª–Ω–∏ –ª–∏–Ω–∫–æ–≤–µ.");
  }
  const url = args.join(" ").trim();
  if (!url) {
    return message.reply("‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π: `!addsocial <–ª–∏–Ω–∫>`");
  }
  const gset = ensureGuildSettings(message.guild.id);
  gset.customSocials = gset.customSocials || [];

  if (gset.customSocials.includes(url)) {
    return message.reply("‚ö†Ô∏è –¢–æ–∑–∏ –ª–∏–Ω–∫ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ —Å–ø–∏—Å—ä–∫–∞.");
  }
  gset.customSocials.push(url);
  saveSettings(); 
  return message.reply(`‚úÖ –õ–∏–Ω–∫—ä—Ç **${url}** –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ.`);
}

if (cmd === 'removesocial') {
  if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
    return message.reply("‚ö†Ô∏è –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –ø—Ä–µ–º–∞—Ö–≤–∞—Ç —Å–æ—Ü–∏–∞–ª–Ω–∏ –ª–∏–Ω–∫–æ–≤–µ.");
  }
  if (!args[0]) {
    return message.reply("‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π: `!removesocial <–ª–∏–Ω–∫|–Ω–æ–º–µ—Ä –æ—Ç !socials>`");
  }
  const gset = ensureGuildSettings(message.guild.id);
  gset.customSocials = gset.customSocials || [];

  let removed;
  const a = args[0];

  if (/^\d+$/.test(a)) {
    const idx = parseInt(a, 10) - 1;
    if (idx < 0 || idx >= gset.customSocials.length) {
      return message.reply("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä. –í–∏–∂ `!socials` –∑–∞ –Ω–æ–º–µ—Ä–∞—Ü–∏—è—Ç–∞.");
    }
    removed = gset.customSocials.splice(idx, 1)[0];
  } else {
    const i = gset.customSocials.findIndex(u => u.trim() === a.trim());
    if (i === -1) {
      return message.reply("‚ö†Ô∏è –¢–æ–∑–∏ –ª–∏–Ω–∫ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ —Å–ø–∏—Å—ä–∫–∞.");
    }
    removed = gset.customSocials.splice(i, 1)[0];
  }

  saveSettings(); 
  return message.reply(`‚úÖ –ü—Ä–µ–º–∞—Ö–Ω–∞—Ç: **${removed}**`);
}
  if (cmd === 'top') {
    const g = ensureGuildStore(guildId);
    const top = Object.entries(g.users)
      .sort((a,b) => Object.keys(b[1].achievements).length - Object.keys(a[1].achievements).length)
      .slice(0, 5)
      .map(([id, data], i) => `${i+1}. <@${id}> ‚Äî ${Object.keys(data.achievements).length} –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è`);
    return message.channel.send(top.length ? `üìä –¢–æ–ø 5 (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä):\n${top.join('\n')}` : '‚ùå –ù—è–º–∞ –∫–ª–∞—Å–∞—Ü–∏—è.');
  }

  if (cmd === 'stats') {
    const todayKey = new Date().toISOString().split('T')[0];
    const todayCount = userData.dailyCounts?.[todayKey] || 0;
    const lvl = computeLevel(userData);
    return message.reply(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ <@${userId}> (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä):\n` +
      `üÜô –ù–∏–≤–æ: ${lvl}\n` +
      `üìù –°—ä–æ–±—â–µ–Ω–∏—è: ${userData.messages}\n` +
      `üóìÔ∏è –î–Ω–µ—Å: ${todayCount}\n` +
      `üñºÔ∏è –ú–µ–º–µ—Ç–∞/—Å–Ω–∏–º–∫–∏: ${userData.memesCount}\n` +
      `üí¨ –°–ø–æ–º–µ–Ω–∞–≤–∞–Ω–∏—è: ${userData.mentions}\n` +
      `üíñ –ü–æ–ª—É—á–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏: ${userData.reactionsReceived} | ‚ö° –ü–æ—Å—Ç–∞–≤–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏: ${userData.reactionsGiven}\n` +
      `üî• –ê–∫—Ç–∏–≤–Ω–∏ –¥–Ω–∏: ${Object.keys(userData.activeDays).length}\n` +
      `üèÜ –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${Object.keys(userData.achievements).length}`
    );
  }

  if (cmd === 'today') {
    const g = ensureGuildStore(guildId);
    const todayKey = new Date().toISOString().split('T')[0];
    const rows = Object.entries(g.users)
      .map(([id, d]) => ({ id, n: d.dailyCounts?.[todayKey] || 0 }))
      .filter(r => r.n > 0)
      .sort((a,b) => b.n - a.n)
      .slice(0, 20);
    if (!rows.length) return message.channel.send('üì≠ –î–Ω–µ—Å –Ω—è–º–∞ —Å—ä–æ–±—â–µ–Ω–∏—è.');
    const lines = await Promise.all(rows.map(async (r,i) => {
      const m = await message.guild.members.fetch(r.id).catch(()=>null);
      const label = m ? m.toString() : `<@${r.id}>`;
      return `${i+1}. ${label} ‚Äî **${r.n}**`;
    }));
    const emb = new EmbedBuilder().setTitle('üóìÔ∏è –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–∏ –î–ù–ï–° (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä)').setDescription(lines.join('\n')).setColor(0xFEE75C);
    return sendEmbedOrText(message.channel, emb, `üóìÔ∏è –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–∏ –î–ù–ï–°:\n${lines.join('\n')}`);
  }

  if (cmd === 'messages') {
    const t = message.mentions.users.first() || message.author;
    await ensureUser(message.guild, t.id);
    const d = store[guildId].users[t.id];
    return message.channel.send(`‚úâÔ∏è ${t} –∏–º–∞ **${d?.messages || 0}** —Å—ä–æ–±—â–µ–Ω–∏—è (–≤ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).`);
  }

  // ===== RP (—Å mention) =====
  const needMention = (t) => { if (!t) { message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!–∫–æ–º–∞–Ω–¥–∞ @user`'); return false; } return true; };
  if (cmd === 'kill'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `‚ò†Ô∏è ${message.author} —É–±–∏ ${t}!`,'kill'); }
  if (cmd === 'pat'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üêæ ${message.author} –ø–æ–≥–∞–ª–∏ ${t}.`,'pat'); }
  if (cmd === 'slap'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üñêÔ∏è ${message.author} –∑–∞—à–ª–µ–≤–∏ ${t}!`,'slap'); }
  if (cmd === 'hug'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `ü§ó ${message.author} –ø—Ä–µ–≥—ä—Ä–Ω–∞ ${t}.`,'hug'); }
  if (cmd === 'kiss'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üíã ${message.author} —Ü–µ–ª—É–Ω–∞ ${t}.`,'kiss'); }
  if (cmd === 'shakehands'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `ü§ù ${message.author} —Å—Ç–∏—Å–Ω–∞ —Ä—ä–∫–∞—Ç–∞ –Ω–∞ ${t}.`,'shakehands'); }
  if (cmd === 'wave'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üëã ${message.author} –ø–æ–º–∞—Ö–∞ –Ω–∞ ${t}.`,'wave'); }
  if (cmd === 'poke'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üëâ ${message.author} —Å—Ä—ä—á–∫–∞ ${t}.`,'poke'); }
  if (cmd === 'marry'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üíç ${message.author} —Å–µ –æ–∂–µ–Ω–∏ –∑–∞ ${t}!`,'marry'); }
  if (cmd === 'divorce'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üíî ${message.author} —Å–µ —Ä–∞–∑–≤–µ–¥–µ —Å ${t}.`,'divorce'); }
  if (cmd === 'highfive'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `‚úã ${message.author} –ø–ª–µ—Å–Ω–∞ –ø–µ—Ç —Å ${t}!`,'highfive'); }
  if (cmd === 'give'){
    const t=message.mentions.users.first(); if(!needMention(t))return;
    const item=args.filter(a=>!/^<@!?\d+>$/.test(a)).join(' ').trim();
    if(!item) return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!give –ø—Ä–µ–¥–º–µ—Ç @user`');
    return sendRPDynamic(message.channel, `üéÅ ${message.author} –¥–∞–¥–µ **${item}** –Ω–∞ ${t}.`,'give');
  }
  if (cmd === 'fight'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `ü•ä ${message.author} —Å–µ –±–∏–µ —Å ${t}!`,'fight'); }
  if (cmd === 'sell'){ const t=message.mentions.users.first(); if(!needMention(t))return; return sendRPDynamic(message.channel, `üõí ${message.author} ‚Äû–ø—Ä–æ–¥–∞–¥–µ‚Äú –Ω–µ—â–æ –Ω–∞ ${t}.`,'sell'); }
  if (cmd === 'sell1'){
    const t=message.mentions.users.first(); if(!needMention(t))return;
    const item=args.filter(a=>!/^<@!?\d+>$/.test(a)).join(' ').trim();
    if(!item) return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!sell1 <–ø—Ä–µ–¥–º–µ—Ç> @user`');
    return sendRPDynamic(message.channel, `üíº ${message.author} –ø—Ä–æ–¥–∞–¥–µ **${item}** –Ω–∞ ${t}.`,'sell1');
  }
  if (cmd === 'kick') {
  const t = message.mentions.users.first();
  if (!t) return message.reply("‚ö†Ô∏è –¢—Ä—è–±–≤–∞ –¥–∞ —Å–ø–æ–º–µ–Ω–µ—à –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª! –ò–∑–ø–æ–ª–∑–≤–∞–π: `!kick @user`");

  const gifs = require('./gifs.json');
  const arr = gifs.kick || [];
  const gif = arr.length ? arr[Math.floor(Math.random() * arr.length)] : null;

  const embed = new EmbedBuilder()
    .setDescription(`üë¢ ${message.author} –∏–∑—Ä–∏—Ç–∞ ${t}!`)
    .setColor(0xff0000);

  if (gif) embed.setImage(gif);

  return message.channel.send({ embeds: [embed] });
}

if (cmd === 'tickle') {
  const t = message.mentions.users.first();
  if (!t) return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!tickle @user`');

  const gifs = require('./gifs.json');
  const arr = gifs.tickle || [];
  const gif = arr.length ? arr[Math.floor(Math.random() * arr.length)] : null;

  const embed = new EmbedBuilder()
    .setDescription(`ü§£ ${message.author} –≥—ä–¥–µ–ª–∏—á–∫–∞ ${t}!`)
    .setColor(0xFFC83D);

  if (gif) embed.setImage(gif);

  return message.channel.send({ embeds: [embed] });
}
if (cmd === 'punch') {
  const t = message.mentions.users.first();
  if (!t) return message.reply('‚ö†Ô∏è –¢—Ä—è–±–≤–∞ –¥–∞ —Å–ø–æ–º–µ–Ω–µ—à –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª! –ò–∑–ø–æ–ª–∑–≤–∞–π: `!punch @user`');

  const gifs = require('./gifs.json');
  const arr = gifs.punch || [];
  const gif = arr.length ? arr[Math.floor(Math.random() * arr.length)] : null;

  const embed = new EmbedBuilder()
    .setDescription(`üëä ${message.author} —É–¥–∞—Ä–∏ ${t}!`)
    .setColor(0xff4500);

  if (gif) embed.setImage(gif);

  return message.channel.send({ embeds: [embed] });
}


  // ===== RP (–±–µ–∑ mention) =====
  if (cmd === 'yay')      return sendRPDynamic(message.channel, `üéâ ${message.author} —Å–µ –∑–∞—Ä–∞–¥–≤–∞!`,'yay');
  if (cmd === 'run')      return sendRPDynamic(message.channel, `üèÉ ${message.author} –ø–æ–±—è–≥–∞.`,'run');
  if (cmd === 'lay')      return sendRPDynamic(message.channel, `üõèÔ∏è ${message.author} –ø–æ–ª–µ–≥–Ω–∞.`,'lay');
  if (cmd === 'attack')   return sendRPDynamic(message.channel, `‚öîÔ∏è ${message.author} —Å–µ –ø—Ä–∏–≥–æ—Ç–≤—è –∑–∞ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ!`,'attack');
  if (cmd === 'defense') return sendRPDynamic(message.channel, `üõ°Ô∏è ${message.author} —Å–µ –∑–∞—â–∏—Ç–∞–≤–∞!`,'deffense');
  if (cmd === 'cry')      return sendRPDynamic(message.channel, `üò≠ ${message.author} –ø–ª–∞—á–µ.`,'cry');
  if (cmd === 'sad')      return sendRPDynamic(message.channel, `üòî ${message.author} –µ —Ç—ä–∂–µ–Ω.`,'sad');
  if (cmd === 'happy')    return sendRPDynamic(message.channel, `üòÑ ${message.author} –µ –≤–µ—Å–µ–ª!`,'happy');
  if (cmd === 'angry')    return sendRPDynamic(message.channel, `üò† ${message.author} –µ —è–¥–æ—Å–∞–Ω!`,'angry');
  if (cmd === 'drink')    return sendRPDynamic(message.channel, `üç∫ ${message.author} –≤–¥–∏–≥–Ω–∞ —á–∞—à–∞!`,'drink');
  if (cmd === 'hungry')   return sendRPDynamic(message.channel, `üòã ${message.author} –æ–≥–ª–∞–¥–Ω—è.`,'hungry');
  if (cmd === 'cheers')   return sendRPDynamic(message.channel, `ü•Ç ${message.author} –∫–∞–∑–∞: –ù–∞–∑–¥—Ä–∞–≤–µ!`,'cheers');
  if (cmd === 'eat')      return sendRPDynamic(message.channel, `üçΩÔ∏è ${message.author} –ø–æ—Ö–∞–ø–≤–∞.`,'eat');
  if (cmd === 'stare')    return sendRPDynamic(message.channel, `üëÄ ${message.author} —Å–µ –≤—Ç—Ä–µ–Ω—á–∏.`,'stare');
  if (cmd === 'cringe')   return sendRPDynamic(message.channel, `üò¨ ${message.author} –∫—Ä–∏–Ω–¥–∂–Ω–∞.`,'cringe');
  if (cmd === 'laugh')    return sendRPDynamic(message.channel, `üòÇ ${message.author} —Å–µ –∑–∞–ª–∏–≤–∞ –æ—Ç —Å–º—è—Ö.`,'laugh');
  if (cmd === 'money')    return sendRPDynamic(message.channel, `üí∏ ${message.author} ‚Äû–≤–∞–ª–∏‚Äú –ø–∞—Ä–∏.`,'money');
  if (cmd === 'fly')      return sendRPDynamic(message.channel, `üïäÔ∏è ${message.author} –ø–æ–ª–µ—Ç—è!`,'fly');
  if (cmd === 'jump')     return sendRPDynamic(message.channel, `ü™Ç ${message.author} –ø–æ–¥—Å–∫–æ—á–∏.`,'jump');
  if (cmd === 'buy') {
    const item = args.join(' ').trim();
    return sendRPDynamic(message.channel, item ? `üõçÔ∏è ${message.author} –∫—É–ø–∏ **${item}**.` : `üõçÔ∏è ${message.author} –∫—É–ø–∏ –Ω–µ—â–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.`, 'buy');
  }

  // ===== Suggest / Feedback =====
  if (cmd === 'suggest') {
    const text = args.join(' ').trim();
    if (!text) return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!suggest <—Ç–µ–∫—Å—Ç>`');
    const ch = getGuildChannel(message.guild, 'suggest', 'SUGGEST_CHANNEL_ID');
    if (!ch) return message.reply('‚ö†Ô∏è –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω –∫–∞–Ω–∞–ª: `!setchannel suggest #–∫–∞–Ω–∞–ª`');
    const emb = new EmbedBuilder().setTitle('üí° –ù–æ–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
      .addFields({ name:'–û—Ç', value:`${message.author} (${message.author.id})` },{ name:'–ö–∞–Ω–∞–ª', value:`${message.channel}` },{ name:'–¢–µ–∫—Å—Ç', value:text })
      .setTimestamp(new Date()).setColor(0xFEE75C);
    await sendEmbedOrText(ch, emb, `üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${message.author} (${message.author.id})\n–ö–∞–Ω–∞–ª: ${message.channel}\n–¢–µ–∫—Å—Ç: ${text}`);
    return message.reply('‚úÖ –ò–∑–ø—Ä–∞—Ç–µ–Ω–æ. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º!');
  }
  if (cmd === 'feedback') {
    const text = args.join(' ').trim();
    if (!text) return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!feedback <—Ç–µ–∫—Å—Ç>`');
    const ch = getGuildChannel(message.guild, 'feedback', 'FEEDBACK_CHANNEL_ID');
    if (!ch) return message.reply('‚ö†Ô∏è –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω –∫–∞–Ω–∞–ª: `!setchannel feedback #–∫–∞–Ω–∞–ª`');
    const emb = new EmbedBuilder().setTitle('üìù –û–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞')
      .addFields({ name:'–û—Ç', value:`${message.author} (${message.author.id})` },{ name:'–ö–∞–Ω–∞–ª', value:`${message.channel}` },{ name:'–¢–µ–∫—Å—Ç', value:text })
      .setTimestamp(new Date()).setColor(0x57F287);
    await sendEmbedOrText(ch, emb, `üìù –û–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞ –æ—Ç ${message.author} (${message.author.id})\n–ö–∞–Ω–∞–ª: ${message.channel}\n–¢–µ–∫—Å—Ç: ${text}`);
    return message.reply('‚úÖ –ò–∑–ø—Ä–∞—Ç–µ–Ω–æ. üôè');
  }

  // ===== Report =====
  if (cmd === 'report') {
    const reported = message.mentions.users.first();
    if (!reported) {
      return message.reply('‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: `!report @user –ø—Ä–∏—á–∏–Ω–∞ | –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞`\n‚Ä¢ –ö–∞—Ç–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞ –º–æ–∂–µ –¥–∞ –∫–∞—á–∏—Ç–µ —Å–∫—Ä–∏–π–Ω—à–æ—Ç–∏, –ª–∏–Ω–∫–æ–≤–µ –∏ –ø—Ä–æ—á–∏–µ.');
    }
    const raw = message.content.replace(/^!report\s+<@!?(\d+)>\s*/i, '').trim();
    if (!raw) return message.reply('‚ÑπÔ∏è –î–æ–±–∞–≤–∏ –ø—Ä–∏—á–∏–Ω–∞ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å `|`).');

    let reason = raw, evidence = '–Ω–µ —Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω–∏';
    if (raw.includes('|')) {
      const [l, r] = raw.split('|');
      reason = (l || '').trim() || '‚Äî';
      evidence = (r || '').trim() || '–Ω–µ —Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω–∏';
    }
    if (message.guild.members.me?.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
      message.delete().catch(() => {});
    }

    const reportChannel = getGuildChannel(message.guild, 'reports', 'REPORT_CHANNEL_ID');
    const payload =
      `üö® **REPORT**\n` +
      `üë§ –û—Ç: ${message.author} (${message.author.id})\n` +
      `üéØ –°—Ä–µ—â—É: ${reported} (${reported.id})\n` +
      `üìÑ –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
      `üìé –î–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞: ${evidence}\n` +
      `üìç –ö–∞–Ω–∞–ª: ${message.channel}\n` +
      `‚è∞ –í—Ä–µ–º–µ: ${new Date().toLocaleString()}`;

    if (reportChannel) await safeSend(reportChannel, payload);
    else { const owner = await message.guild.fetchOwner().catch(()=>null); owner && await owner.send(payload).catch(()=>{}); }

    await message.author.send('–î–æ–∫–ª–∞–¥—ä—Ç –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –∫—ä–º –∞–¥–º–∏–Ω–∏—Ç–µ –∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞, –º–æ–ª—è –∏–∑—á–∞–∫–∞–π—Ç–µ.').catch(()=>{});
    return;
  }

  // ===== –ê–¥–º–∏–Ω gate =====
  const adminOnly = [
    'del','resetachievements','resetmessages','resetdays','resetmentions','resetall',
    'addmessages','rmessages','topres','achsetup','setchannel','showchannels',
    'addgif','delgif','listgifs','testgifs','pin','unpin','check','addsocial','monthly','active'
  ];
  if (adminOnly.includes(cmd)) {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply('‚õî –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏.');
    }
  }

  // ===== –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∏ =====
  if (cmd === 'del') {
    const amount = parseInt(args[0],10);
    if (isNaN(amount)||amount<1||amount>100) return message.reply('‚ÑπÔ∏è `!del <1-100> [@user]`');
    const target = message.mentions.users.first();
    const fetched = await message.channel.messages.fetch({ limit: 100 });
    let toDelete = fetched.filter(m => Date.now()-m.createdTimestamp < 14*24*60*60*1000);
    if (target) toDelete = toDelete.filter(m => m.author.id === target.id);
    toDelete = toDelete.first(amount);
    if (!toDelete?.length) return message.reply('‚ö†Ô∏è –ù—è–º–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏ —Å—ä–æ–±—â–µ–Ω–∏—è.');
    await message.channel.bulkDelete(toDelete, true).catch(() => {});
    const m = await message.channel.send(`üßπ –ò–∑—Ç—Ä–∏—Ç–∏: **${toDelete.length}** ${target?`–Ω–∞ ${target}`:''}.`);
    setTimeout(()=>m.delete().catch(()=>{}), 4000);
    const log = getGuildChannel(message.guild, 'logs', 'LOG_CHANNEL_ID');
    log && log.send(`üìù DELETE | üëÆ ${message.author} | ${message.channel} | ${toDelete.length}${target?` | üéØ ${target}`:''}`).catch(()=>{});
  }
  
  if (cmd === 'pin' || cmd === 'unpin') {
    const token = args[0];
    if (!token) return message.reply(`‚ÑπÔ∏è –ü–æ–ª–∑–≤–∞–π: \`!${cmd} <ID –∏–ª–∏ –ª–∏–Ω–∫ –∫—ä–º —Å—ä–æ–±—â–µ–Ω–∏–µ>\``);
    let channelId = message.channel.id, messageId = null;
    const m = token.match(/^https?:\/\/(?:ptb\.|canary\.)?discord\.com\/channels\/(\d+)\/(\d+)\/(\d+)$/);
    if (m) { channelId = m[2]; messageId = m[3]; } else { messageId = token; }
    try {
      const ch = message.guild.channels.cache.get(channelId) || await client.channels.fetch(channelId);
      if (!ch || !('messages' in ch)) return message.reply('‚ö†Ô∏è –ù–µ –Ω–∞–º–∏—Ä–∞–º –∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–æ–≤–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ.');
      const msg = await ch.messages.fetch(messageId);
      if (cmd === 'pin') { await msg.pin(); return message.channel.send(`üß∑ –ó–∞–∫–∞—á–µ–Ω–æ: [–ª–∏–Ω–∫](${msg.url})`); }
      else { await msg.unpin(); return message.channel.send(`‚ùé –û—Ç–∫–∞—á–µ–Ω–æ: [–ª–∏–Ω–∫](${msg.url})`); }
    } catch (e) { return message.reply(`‚ùå –ù–µ —É—Å–ø—è—Ö: ${e.message || e}`); }
  }

  if (cmd === 'resetachievements') {
    const nowISO = new Date().toISOString();
    const g = ensureGuildStore(guildId);
    for (const id of Object.keys(g.users)) {
      g.users[id].achievements = {};
      g.users[id].messages = 0;
      g.users[id].mentions = 0;
      g.users[id].activeDays = {};
      g.users[id].dailyCounts = {};
      g.users[id].dailyMentions = {};
      g.users[id].dailyReactionsGiven = {};
      g.users[id].joinDate = nowISO;
      g.users[id].levelCache = 0;
      g.users[id].nightOwlCount = 0;
      g.users[id].memesCount = 0;
      g.users[id].reactionsGiven = 0;
      g.users[id].reactionsReceived = 0;
      g.users[id].voice = { totalMs:0, sessionStart:null, sessionChannelId:null, inAFKMs:0, duetStart:null, lastJoinSize:0 };
    }
    save();
    return message.channel.send('‚ôªÔ∏è –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ç–∞ –∏ –±—Ä–æ—è—á–∏—Ç–µ —Å–∞ –Ω—É–ª–∏—Ä–∞–Ω–∏ (–≤–∫–ª. joinDate) –∑–∞ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä.');
  }

  if (cmd === 'resetmessages') {
    const t = message.mentions.users.first();
    const g = ensureGuildStore(guildId);
    if ((args[0]||'').toLowerCase()==='all') {
      for (const id in g.users) { g.users[id].messages=0; g.users[id].dailyCounts={}; g.users[id].levelCache = computeLevel(g.users[id]); }
      save(); return message.channel.send('üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ **–≤—Å–∏—á–∫–∏** (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).');
    }
    if (!t) return message.reply('‚ÑπÔ∏è `!resetmessages @user` –∏–ª–∏ `!resetmessages all`');
    await ensureUser(message.guild, t.id); g.users[t.id].messages = 0; g.users[t.id].dailyCounts={}; g.users[t.id].levelCache=0; save();
    return message.channel.send(`üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ ${t}.`);
  }

  if (cmd === 'resetdays') {
    const t = message.mentions.users.first();
    const g = ensureGuildStore(guildId);
    if ((args[0]||'').toLowerCase()==='all') {
      for (const id in g.users) g.users[id].activeDays={}; save();
      return message.channel.send('üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ –∞–∫—Ç–∏–≤–Ω–∏ –¥–Ω–∏ –∑–∞ **–≤—Å–∏—á–∫–∏** (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).');
    }
    if (!t) return message.reply('‚ÑπÔ∏è `!resetdays @user` –∏–ª–∏ `!resetdays all`');
    await ensureUser(message.guild, t.id); g.users[t.id].activeDays={}; save();
    return message.channel.send(`üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ –∞–∫—Ç–∏–≤–Ω–∏ –¥–Ω–∏ –∑–∞ ${t}.`);
  }

  if (cmd === 'resetmentions') {
    const t = message.mentions.users.first();
    const g = ensureGuildStore(guildId);
    if ((args[0]||'').toLowerCase()==='all') {
      for (const id in g.users) g.users[id].mentions=0; save();
      return message.channel.send('üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ —Å–ø–æ–º–µ–Ω–∞–≤–∞–Ω–∏—è –∑–∞ **–≤—Å–∏—á–∫–∏** (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).');
    }
    if (!t) return message.reply('‚ÑπÔ∏è `!resetmentions @user` –∏–ª–∏ `!resetmentions all`');
    await ensureUser(message.guild, t.id); g.users[t.id].mentions=0; save();
    return message.channel.send(`üîÑ –ù—É–ª–∏—Ä–∞–Ω–∏ —Å–ø–æ–º–µ–Ω–∞–≤–∞–Ω–∏—è –∑–∞ ${t}.`);
  }

  if (cmd === 'resetall') {
    const g = ensureGuildStore(guildId);
    const t = message.mentions.users.first() || null;
    const everyone = (args.join(' ').toLowerCase().trim()==='all' || args.join(' ').toLowerCase().trim()==='–≤—Å–∏—á–∫–∏');
    const nowISO = new Date().toISOString();
    const resetUser = (id) => {
      g.users[id] = {
        messages: 0, mentions: 0, activeDays: {}, dailyCounts:{}, dailyMentions:{}, dailyReactionsGiven:{},
        joinDate: nowISO, lastActiveISO: nowISO, achievements: {}, levelCache: 0,
        nightOwlCount:0, memesCount:0, reactionsGiven:0, reactionsReceived:0,
        voice:{ totalMs:0, sessionStart:null, sessionChannelId:null, inAFKMs:0, duetStart:null, lastJoinSize:0 }
      };
    };
    if (everyone) {
      for (const id of Object.keys(g.users)) resetUser(id);
      save();
      const log = getGuildChannel(message.guild, 'logs', 'LOG_CHANNEL_ID');
      log && log.send(`üóëÔ∏è RESETALL –æ—Ç ${message.author} ‚Üí –≤—Å–∏—á–∫–∏ (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).`).catch(()=>{});
      return message.channel.send('üóëÔ∏è –í—Å–∏—á–∫–æ –µ –Ω—É–ª–∏—Ä–∞–Ω–æ –∑–∞ **–≤—Å–∏—á–∫–∏** (–≤–∫–ª. joinDate) –≤ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä.');
    }
    const u = t || message.author;
    await ensureUser(message.guild, u.id); resetUser(u.id); save();
    const log = getGuildChannel(message.guild, 'logs', 'LOG_CHANNEL_ID');
    log && log.send(`üóëÔ∏è RESETALL –æ—Ç ${message.author} ‚Üí ${u} (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).`).catch(()=>{});
    return message.channel.send(`üóëÔ∏è –í—Å–∏—á–∫–æ –µ –Ω—É–ª–∏—Ä–∞–Ω–æ –∑–∞ ${u} (–≤–∫–ª. joinDate) –≤ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä.`);
  }

  if (cmd === 'addmessages') {
    const t = message.mentions.users.first();
    const n = parseInt(args[0],10);
    const g = ensureGuildStore(guildId);
    if (!t || isNaN(n) || n<1) return message.reply('‚ÑπÔ∏è `!addmessages @user <–±—Ä–æ–π>`');
    await ensureUser(message.guild, t.id); g.users[t.id].messages += n; g.users[t.id].levelCache = computeLevel(g.users[t.id]); save();
    return message.channel.send(`‚ûï –î–æ–±–∞–≤–µ–Ω–∏ **${n}** —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ ${t} (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).`);
  }

  if (cmd === 'rmessages') {
    const t = message.mentions.users.first();
    const n = parseInt(args[0],10);
    const g = ensureGuildStore(guildId);
    if (!t || isNaN(n) || n<1) return message.reply('‚ÑπÔ∏è `!rmessages @user <–±—Ä–æ–π>`');
    await ensureUser(message.guild, t.id);
    g.users[t.id].messages = Math.max(0, (g.users[t.id].messages || 0) - n);
    g.users[t.id].levelCache = computeLevel(g.users[t.id]); save();
    return message.channel.send(`‚ûñ –ü—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ **${n}** —Å—ä–æ–±—â–µ–Ω–∏—è –æ—Ç ${t} (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).`);
  }

  if (cmd === 'topres') {
    store[guildId] = { users: {} };
    save();
    return message.channel.send('üóëÔ∏è –¢–æ–ø –∫–ª–∞—Å–∞—Ü–∏—è—Ç–∞ –∏ —Å–ø–∏—Å—ä–∫—ä—Ç —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ —Å–∞ –Ω—É–ª–∏—Ä–∞–Ω–∏ (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä).');
  }

  if (cmd === 'achsetup') {
    const sub = (args.shift()||'').toLowerCase();
    const valid = Object.keys(ACH);
    const gset = ensureGuildSettings(message.guild.id);
    if (!sub || sub==='help') {
      return message.reply('‚ÑπÔ∏è `!achsetup list`\n`!achsetup set <key> @–†–æ–ª—è`\n`!achsetup clear <key>`');
    }
    if (sub==='list') {
      const rows = valid.map(k => `‚Ä¢ ${ACH[k]} ‚Üí ${gset.achRoles[k] ? `<@&${gset.achRoles[k]}>` : '‚Äî'}`).join('\n');
      const emb = new EmbedBuilder().setTitle('üè∑Ô∏è –†–æ–ª–∏ –∑–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è').setDescription(rows).setColor(0x57F287);
      return sendEmbedOrText(message.channel, emb, `–†–æ–ª–∏ –∑–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n${rows}`);
    }
    if (sub==='set') {
      const key = (args.shift()||''); if (!valid.includes(key)) return message.reply('‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–ª—é—á (–≤–∏–∂ `!achsetup list`).');
      const role = message.mentions.roles.first(); if (!role) return message.reply('‚ÑπÔ∏è –ü–æ—Å–æ—á–∏ —Ä–æ–ª—è: `!achsetup set <key> @–†–æ–ª—è`');
      if (!message.guild.members.me?.permissions.has(PermissionsBitField.Flags.ManageRoles)) return message.reply('‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ –ø—Ä–∞–≤–æ **Manage Roles**.');
      if (message.guild.members.me.roles.highest.position <= role.position) return message.reply('‚ö†Ô∏è –ù–µ –º–æ–≥–∞ –¥–∞ —É–ø—Ä–∞–≤–ª—è–≤–∞–º —Ç–∞–∑–∏ —Ä–æ–ª—è.');
      gset.achRoles[key] = role.id; saveSettings();
      return message.channel.send(`‚úÖ –ó–∞ **${ACH[key]}** —â–µ —Å–µ –¥–∞–≤–∞ ${role}.`);
    }
    if (sub==='clear') {
      const key = (args.shift()||''); if (!valid.includes(key)) return message.reply('‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–ª—é—á.');
      delete gset.achRoles[key]; saveSettings();
      return message.channel.send(`üßπ –†–æ–ª—è—Ç–∞ –∑–∞ **${ACH[key]}** –µ –∏–∑—á–∏—Å—Ç–µ–Ω–∞.`);
    }
    return message.reply('‚ÑπÔ∏è `!achsetup help`');
  }

  if (cmd === 'addgif') { const type=(args[0]||'').toLowerCase(); const url=args[1]||''; if(!type||!url) return message.reply('‚ÑπÔ∏è `!addgif <—Ç–∏–ø> <url>`'); if(!gifs[type]) gifs[type]=[]; gifs[type].push(url); saveGifs(); return message.channel.send(`‚úÖ –î–æ–±–∞–≤–µ–Ω GIF –∫—ä–º **${type}**.`); }
  if (cmd === 'delgif') { const type=(args[0]||'').toLowerCase(); const idx=parseInt(args[1],10)-1; if(!type||isNaN(idx)) return message.reply('‚ÑπÔ∏è `!delgif <—Ç–∏–ø> <–Ω–æ–º–µ—Ä>`'); if(!gifs[type]||!gifs[type][idx]) return message.reply('‚ö†Ô∏è –ù—è–º–∞ —Ç–∞–∫—ä–≤ GIF.'); gifs[type].splice(idx,1); saveGifs(); return message.channel.send(`üóëÔ∏è –ü—Ä–µ–º–∞—Ö–Ω–∞—Ç GIF #${idx+1} –æ—Ç **${type}**.`); }
  if (cmd === 'listgifs') { const type=(args[0]||'').toLowerCase(); if(!type||!gifs[type]?.length) return message.reply('‚ö†Ô∏è –ù—è–º–∞ GIF-–æ–≤–µ –∑–∞ —Ç–æ–∑–∏ —Ç–∏–ø.'); const list=gifs[type].map((g,i)=>`${i+1}. ${g}`).join('\n'); const emb=new EmbedBuilder().setTitle(`üìÇ GIF-–æ–≤–µ –∑–∞ ${type}`).setDescription(list).setColor(0x5865F2); return sendEmbedOrText(message.channel, emb, `GIF-–æ–≤–µ –∑–∞ ${type}:\n${list}`); }

  if (cmd === 'setchannel') {
    const type = (args.shift()||'').toLowerCase();
    const ch = message.mentions.channels.first();
    const allowed = ['reports','logs','console','suggest','feedback','achievements', 'nicklogs'];
    if (!type || !allowed.includes(type) || !ch) {
      return message.reply('‚ÑπÔ∏è `!setchannel <—Ç–∏–ø> #–∫–∞–Ω–∞–ª` (—Ç–∏–ø: reports, logs, console, suggest, feedback, achievements, nicklogs)' );
    }
    setGuildChannel(message.guild.id, type, ch.id);
    if (type === 'console') consoleTargetChannelId = ch.id;
    return message.channel.send(`‚úÖ –ó–∞–¥–∞–¥–µ–Ω –∫–∞–Ω–∞–ª –∑–∞ **${type}**: <#${ch.id}>`);
  }
  if (cmd === 'showchannels') {
    const s = ensureGuildSettings(message.guild.id);
    const list =
      `üèÜ –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${s.achievements ? `<#${s.achievements}>` : '‚Äî'}\n`+
      `üö® –†–µ–ø–æ—Ä—Ç–∏: ${s.reports ? `<#${s.reports}>` : '‚Äî'}\n`+
      `üìù –õ–æ–≥–æ–≤–µ: ${s.logs ? `<#${s.logs}>` : '‚Äî'}\n`+
      `üñ•Ô∏è –ö–æ–Ω–∑–æ–ª–∞: ${s.console ? `<#${s.console}>` : '‚Äî'}\n`+
      `üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${s.suggest ? `<#${s.suggest}>` : '‚Äî'}\n`+
      `üìù –û–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞: ${s.feedback ? `<#${s.feedback}>` : '‚Äî'}\n`+
      `üìñ –°–º—è–Ω–∞ –Ω–∞ –Ω–∏–∫–Ω–µ–π–º: ${s.nicklogs ? `<#${s.nicklogs}>` : '‚Äî'}\n`+
      `üîó –°–æ—Ü–∏–∞–ª–∫–∏: ${(s.socialLinks||[]).length} –∑–∞–ø–∏—Å(–∞)`;

    return message.channel.send(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n${list}`);
}

  if (cmd === 'check') {
    const sub = (args.shift()||'').toLowerCase();
    if (!sub) return message.reply('‚ÑπÔ∏è `!check bots|users|stats @user`');
    await message.guild.members.fetch().catch(()=>{});
    if (sub === 'bots') {
      const bots = message.guild.members.cache.filter(m => m.user.bot).size;
      return message.channel.send(`ü§ñ –ë–æ—Ç–æ–≤–µ –≤ —Å—ä—Ä–≤—ä—Ä–∞: **${bots}**`);
    }
    if (sub === 'users') {
      const users = message.guild.members.cache.filter(m => !m.user.bot).size;
      return message.channel.send(`üë• –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (—Ö–æ—Ä–∞): **${users}**`);
    }
    if (sub === 'stats') {
      const t = message.mentions.users.first();
      if (!t) return message.reply('‚ÑπÔ∏è `!check stats @user`');
      await ensureUser(message.guild, t.id);
      const d = store[guildId].users[t.id] || {};
      const todayKey = new Date().toISOString().split('T')[0];
      const todayCount = d.dailyCounts?.[todayKey] || 0;
      const text =
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${t} (—Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä):\n` +
        `üÜô –ù–∏–≤–æ: ${computeLevel(d)}\n` +
        `üìù –°—ä–æ–±—â–µ–Ω–∏—è: ${d.messages||0}\n` +
        `üóìÔ∏è –î–Ω–µ—Å: ${todayCount}\n` +
        `üñºÔ∏è –ú–µ–º–µ—Ç–∞/—Å–Ω–∏–º–∫–∏: ${d.memesCount||0}\n` +
        `üí¨ –°–ø–æ–º–µ–Ω–∞–≤–∞–Ω–∏—è: ${d.mentions||0}\n` +
        `üíñ –ü–æ–ª—É—á–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏: ${d.reactionsReceived||0} | ‚ö° –ü–æ—Å—Ç–∞–≤–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏: ${d.reactionsGiven||0}\n` +
        `üî• –ê–∫—Ç–∏–≤–Ω–∏ –¥–Ω–∏: ${Object.keys(d.activeDays||{}).length}\n` +
        `üèÜ –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${Object.keys(d.achievements||{}).length}`;
      return message.channel.send(text);
    }
    return message.reply('‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –ø–æ–¥—Ç–∏–ø. –ü–æ–ª–∑–≤–∞–π: `bots|users|stats @user`');
  }

  if (cmd === 'monthly') {
    const g = ensureGuildStore(guildId);
    const since = new Date(); since.setDate(since.getDate()-30);
    const days = [];
    for (let i=0;i<30;i++) { const d=new Date(); d.setDate(d.getDate()-i); days.push(d.toISOString().split('T')[0]); }
    const rows = Object.entries(g.users).map(([id,u])=>{
      let msgs=0, mentions=0, reacts=0;
      for (const d of days) {
        msgs += u.dailyCounts?.[d] || 0;
        mentions += u.dailyMentions?.[d] || 0;
        reacts += u.dailyReactionsGiven?.[d] || 0;
      }
      return { id, msgs, mentions, reacts };
    }).filter(r => r.msgs || r.mentions || r.reacts)
      .sort((a,b)=> (b.msgs+b.mentions+b.reacts) - (a.msgs+a.mentions+a.reacts))
      .slice(0,15);
    if (!rows.length) return message.channel.send('üì≠ –ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 –¥–Ω–∏.');
    const lines = await Promise.all(rows.map(async (r,i)=>{
      const m = await message.guild.members.fetch(r.id).catch(()=>null);
      const label = m? m.toString() : `<@${r.id}>`;
      return `${i+1}. ${label} ‚Äî üìù${r.msgs} | ‚ö°${r.reacts} | üí¨${r.mentions}`;
    }));
    const emb = new EmbedBuilder().setTitle('üìÜ –ú–µ—Å–µ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç (30 –¥–Ω–∏)').setDescription(lines.join('\n')).setColor(0x57F287);
    return sendEmbedOrText(message.channel, emb, `üìÜ –ú–µ—Å–µ—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç (30 –¥–Ω–∏):\n${lines.join('\n')}`);
  }

  if (cmd === 'active') {
    const t = message.mentions.users.first();
    if (!t) return message.reply('‚ÑπÔ∏è `!active @user`');
    await ensureUser(message.guild, t.id);
    const d = store[guildId].users[t.id];
    return message.channel.send(`üïí –ü–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ ${t}: **${new Date(d.lastActiveISO).toLocaleString()}**`);
  }
  // ====== TEAM CONTACTS ======
if (cmd === 'addteam') {
  if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
    return message.reply("‚ö†Ô∏è –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –¥–æ–±–∞–≤—è—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∫—ä–º –µ–∫–∏–ø–∞.");
  }

  const text = args.join(" ");
  if (!text) {
    return message.reply("‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π: `!addteam <–∫–æ–Ω—Ç–∞–∫—Ç>`");
  }

  const gset = ensureGuildSettings(message.guild.id);
  gset.teamContacts = gset.teamContacts || [];

  gset.teamContacts.push(text);
  saveGuildSettings(message.guild.id, gset);

  return message.reply(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ä—Ç –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω: **${text}**`);
}

if (cmd === 'removeteam') {
  if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
    return message.reply("‚ö†Ô∏è –°–∞–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–≥–∞—Ç –¥–∞ –ø—Ä–µ–º–∞—Ö–≤–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∏ –æ—Ç –µ–∫–∏–ø–∞.");
  }

  if (!args[0]) {
    return message.reply("‚ùå –ò–∑–ø–æ–ª–∑–≤–∞–π: `!removeteam <–Ω–æ–º–µ—Ä –æ—Ç !team>`");
  }

  const gset = ensureGuildSettings(message.guild.id);
  gset.teamContacts = gset.teamContacts || [];

  const idx = parseInt(args[0], 10) - 1; // –ø—Ä–µ–≤—Ä—ä—â–∞ —Å–µ –≤ –∏–Ω–¥–µ–∫—Å (1-–±–∞–∑–∏—Ä–∞–Ω–æ)
  if (isNaN(idx) || idx < 0 || idx >= gset.teamContacts.length) {
    return message.reply("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–µ–Ω –Ω–æ–º–µ—Ä. –í–∏–∂ `!team` –∑–∞ –Ω–æ–º–µ—Ä–∞—Ü–∏—è—Ç–∞.");
  }

  const removed = gset.teamContacts.splice(idx, 1)[0];
  saveGuildSettings(message.guild.id, gset);

  return message.reply(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç: **${removed}**`);
}

if (cmd === 'team') {
  const gset = ensureGuildSettings(message.guild.id);
  gset.teamContacts = gset.teamContacts || [];

  if (gset.teamContacts.length === 0) {
    return message.reply("‚ÑπÔ∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∫—ä–º –µ–∫–∏–ø–∞.");
  }

  const desc = gset.teamContacts.map((c, i) => `${i + 1}. ${c}`).join('\n');
  const emb = new EmbedBuilder()
    .setTitle("üë• –ö–æ–Ω—Ç–∞–∫—Ç —Å –µ–∫–∏–ø–∞ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞")
    .setDescription(desc)
    .setColor(0x00AE86);

  return sendEmbedOrText(message.channel, emb, desc);
}

});

// ====== REACTIONS ======
client.on('messageReactionAdd', async (reaction, user) => {
  if (!reaction.message?.guild || user.bot) return;
  const guild = reaction.message.guild;
  const reactorId = user.id;
  const msgAuthor = reaction.message.author;
  const today = new Date().toISOString().split('T')[0];

  // –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—è (reactor)
  const rUser = await ensureUser(guild, reactorId);
  rUser.reactionsGiven = (rUser.reactionsGiven || 0) + 1;
  rUser.dailyReactionsGiven[today] = (rUser.dailyReactionsGiven[today] || 0) + 1;
  rUser.lastActiveISO = new Date().toISOString();

  // –ø–æ–ª—É—á–∏–ª —Ä–µ–∞–∫—Ü–∏—è (–∞–≤—Ç–æ—Ä—ä—Ç –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ)
  if (msgAuthor && !msgAuthor.bot) {
    const aUser = await ensureUser(guild, msgAuthor.id);
    aUser.reactionsReceived = (aUser.reactionsReceived || 0) + 1;
    aUser.lastActiveISO = new Date().toISOString();
  }

  save();
  // —Ç—Ä–∏–≥—ä—Ä –∫—ä–º achievements (–∞–Ω–æ–Ω—Å –≤ –∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—è—Ç–∞)
  await checkAchievements(guild, reactorId, reaction.message.channel);
  if (msgAuthor && !msgAuthor.bot) await checkAchievements(guild, msgAuthor.id, reaction.message.channel);
});

// ====== VOICE ======
client.on('voiceStateUpdate', async (oldState, newState) => {
  const guild = newState.guild || oldState.guild;
  if (!guild) return;

  const member = newState.member || oldState.member;
  if (!member || member.user.bot) return;

  const gid = guild.id;
  const uid = member.id;
  await ensureUser(guild, uid);
  const u = store[gid].users[uid];
  const now = Date.now();

  const afkId = guild.afkChannelId || null;

  // helper –∑–∞ –ø—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è
  const endSession = (endChannelId) => {
    if (!u.voice.sessionStart) return;
    const dur = now - u.voice.sessionStart;
    u.voice.totalMs += dur;
    // –¥—ä–ª—ä–≥ —Ä–∞–∑–≥–æ–≤–æ—Ä
    if (dur >= 3*60*60*1000) u.voice.hadLongSession = true;
    // AFK –≤—Ä–µ–º–µ —Å–µ –±—Ä–æ–∏, –∞–∫–æ —Å–µ—Å–∏—è—Ç–∞ –µ –±–∏–ª–∞ –≤ AFK
    if (u.voice.sessionChannelId && u.voice.sessionChannelId === afkId) {
      u.voice.inAFKMs = (u.voice.inAFKMs||0) + dur;
    }
    // –î—Ée—Ç (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ): –∞–∫–æ —Å–µ—Å–∏—è—Ç–∞ –µ –∑–∞–ø–æ—á–Ω–∞–ª–∞ —Å 2-–º–∞ –∏ –µ –ø—Ä–æ–¥—ä–ª–∂–∏–ª–∞ >=30 –º–∏–Ω.
    if (u.voice.lastJoinSize === 2 && dur >= 30*60*1000) u.voice.hadDuet = true;

    u.voice.sessionStart = null;
    u.voice.sessionChannelId = null;
    u.voice.duetStart = null;
    u.voice.lastJoinSize = 0;
  };

  const oldCh = oldState.channelId;
  const newCh = newState.channelId;

  // –ù–∞–ø—É—Å–∫–∞–Ω–µ / –ø—Ä–µ–º–µ—Å—Ç–≤–∞–Ω–µ
  if (oldCh && (!newCh || newCh !== oldCh)) {
    endSession(oldCh);
  }

  // –í–ª–∏–∑–∞–Ω–µ / –ø—Ä–µ–º–µ—Å—Ç–≤–∞–Ω–µ
  if (newCh && (!oldCh || newCh !== oldCh)) {
    u.voice.sessionStart = now;
    u.voice.sessionChannelId = newCh;
    const ch = guild.channels.cache.get(newCh);
    const size = ch?.members?.size || 0;
    u.voice.lastJoinSize = size;

    // –ø–∞—Ä—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ (10+ –≤ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω—è–≤–∞–Ω–µ)
    if (size >= 10) u.voice.hadParty = true;

    // —Å–ª—É—à–∞—Ç–µ–ª ‚Äì –ø—ä—Ä–≤–æ –≤–ª–∏–∑–∞–Ω–µ (—â–µ —Å–µ –º–∞—Ä–∫–∏—Ä–∞ –≤ achievements –ø—Ä–∏ check)
    if (!u.achievements.firstVoice) u.achievements.firstVoice = true;

    u.lastActiveISO = new Date().toISOString();
  }

  save();
  // –∞–Ω–æ–Ω—Å–∏—Ç–µ —â–µ —Å–µ –ø—É—Å–Ω–∞—Ç –ø—Ä–∏ —Å–ª–µ–¥–≤–∞—â–æ —Ç–µ–∫—Å—Ç–æ–≤–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—è; –∑–∞ —Å–∏–≥—É—Ä–Ω–æ ‚Äì —Ç—Ä–∏–≥—ä—Ä–Ω–µ–º –∫—ä–º general channel –∞–∫–æ –∏–º–∞
  const chForAnnounce = getGuildChannel(guild, 'achievements', 'ACHIEVEMENT_CHANNEL_ID');
  const anyTextChannel = chForAnnounce || guild.channels.cache.find(c => c.isTextBased?.());
  if (anyTextChannel) {
    await checkAchievements(guild, uid, anyTextChannel);
  }
});

// ====== INVITE LINKS ======
function getInviteLinks() {
  const clientId = client.user?.id;
  if (!clientId) return null;
  const PERM_VIEW_CHANNEL         = 1024;
  const PERM_SEND_MESSAGES        = 2048;
  const PERM_MANAGE_MESSAGES      = 8192;
  const PERM_EMBED_LINKS          = 16384;
  const PERM_ATTACH_FILES         = 32768;
  const PERM_READ_MESSAGE_HISTORY = 65536;
  const minimal =
    PERM_VIEW_CHANNEL + PERM_SEND_MESSAGES + PERM_MANAGE_MESSAGES +
    PERM_EMBED_LINKS + PERM_ATTACH_FILES + PERM_READ_MESSAGE_HISTORY; // 125952

  return {
    adminInvite:   `https://discord.com/oauth2/authorize?client_id=${clientId}&scope=bot&permissions=8`,
    minimalInvite: `https://discord.com/oauth2/authorize?client_id=${clientId}&scope=bot&permissions=${minimal}`,
    minimal
  };
}

// ====== LOGIN ======
client.login(process.env.DISCORD_TOKEN);

// ====== CONSOLE CONTROL (say/sayto) ======
const readline = require('readline');
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
let consoleTargetChannelId = process.env.CONSOLE_CHANNEL_ID || null;
function printConsoleHelp() {
  console.log(`
üñ•Ô∏è Console:
  help                       -> –ø–æ–º–æ—â
  channel <channelId>        -> –∑–∞–¥–∞–≤–∞ –∫–∞–Ω–∞–ª –∑–∞ 'say'
  say <—Ç–µ–∫—Å—Ç>                -> –∏–∑–ø—Ä–∞—â–∞ –≤ —Ç–µ–∫—É—â–∏—è –∫–∞–Ω–∞–ª
  sayto <channelId> <—Ç–µ–∫—Å—Ç>  -> –∏–∑–ø—Ä–∞—â–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∫–∞–Ω–∞–ª
`);}
rl.on('line', async (input) => {
  const line = input.trim(); if (!line) return;
  const [cmd, ...rest] = line.split(' '); const argText = rest.join(' ').trim();
  if (cmd === 'help') return printConsoleHelp();
  if (cmd === 'channel') { if (!rest[0]) return console.log('‚ÑπÔ∏è channel <channelId>'); consoleTargetChannelId = rest[0]; return console.log(`‚úÖ –ö–æ–Ω–∑–æ–ª–µ–Ω –∫–∞–Ω–∞–ª: ${consoleTargetChannelId}`); }
  if (cmd === 'say') {
    if (!consoleTargetChannelId) return console.log('‚ö†Ô∏è –ó–∞–¥–∞–π –∫–∞–Ω–∞–ª: channel <id> –∏–ª–∏ sayto <id> <—Ç–µ–∫—Å—Ç>');
    const ch = client.channels.cache.get(consoleTargetChannelId); if (!ch) return console.log(`‚ö†Ô∏è –ù—è–º–∞ –∫–∞–Ω–∞–ª ${consoleTargetChannelId}`);
    try { await ch.send(argText); console.log(`‚û°Ô∏è #${ch.id}: ${argText}`); } catch (e) { console.log(`‚ùó –ì—Ä–µ—à–∫–∞: ${e.message}`); } return;
  }
  if (cmd === 'sayto') {
    const i = argText.indexOf(' '); if (i === -1) return console.log('‚ÑπÔ∏è sayto <channelId> <—Ç–µ–∫—Å—Ç>');
    const channelId = argText.slice(0,i); const text = argText.slice(i+1);
    const ch = client.channels.cache.get(channelId); if (!ch) return console.log(`‚ö†Ô∏è –ù—è–º–∞ –∫–∞–Ω–∞–ª ${channelId}`);
    try { await ch.send(text); console.log(`‚û°Ô∏è #${ch.id}: ${text}`); } catch (e) { console.log(`‚ùó –ì—Ä–µ—à–∫–∞: ${e.message}`); } return;
  }
  console.log('‚ùì –ù–µ–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–Ω–∑–æ–ª–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ "help".');
});